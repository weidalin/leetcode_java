package written_examination.meituan.train_arr;

/**
 * 小美的列车调度
 * 时间限制： 3000MS
 * 内存限制： 589824KB
 * 题目描述：
 * 小美在参与一次列车调度。常规的调度很简单，就是依次把列车拼到后面即可。
 *
 * 但是，由于有些车厢是同一系列的，需要拼在一起，不能分开。所以可能会出现插队现象。
 *
 * 举例来说，小美先放了一节东风号的车厢1，又放了一节使命号的车厢2，如果接下来的车厢5还是东风号的，小美应该把这节车厢接在车厢1的后面，车厢2的前面，而不是按照常规的方式依序拼在2的后面。换句话说，此时的车厢顺序是[1,5,2]。
 *
 * 另外，小美可能会将两种系列的车厢进行位置的调换。比如在上面这个例子中，调换东风号和使命号之后，车厢的顺序变成了[2,1,5]。
 *
 * 简单来说，有以下两种操作：
 *
 * 操作一：向已经排好的列车序列中加入一节新的车厢，若该车厢从属的系列从未出现，则拼接于队伍的末尾；若该车厢从属的系列已经出现过，则插入至同系列车厢的末尾。
 *
 * 操作二：调换两种系列的车厢的位置。这两种系列在列车序列中的顺序将会发生调换。
 *
 * 现在给你小美的若干操作，你的任务是求出小美调度完成之后的列车序列。
 *
 *
 * 数据范围
 *
 * 保证N<= 1000，列车序号范围[1,1000]，从属系列数量小于等于一百种
 *
 *
 *
 * 输入描述
 * 第一行一个正整数N，表示小美的调度操作数量。
 *
 * 接下来有N行，每行表示一个调度操作。其格式为下列两种之一：
 *
 * 1 x y : x 为一个正整数，y为一个字符串，表示在原列车序列的基础上增加一个车厢x，该车厢从属于y系列。
 *
 * 2 x y : x和y均为字符串，表示替换x系列和y系列在原车厢序中的位置。保证替换操作合法，即替换x系列和y系列时，这两种系列一定存在于列车序列中。
 *
 * 表示车厢系列的字符串将仅由大写字母组成。长度不超过5个字符。
 *
 * 输出描述
 * 一行，按照从前到后的顺序给出调度结束后的车厢序列。车厢序号之间以一个空格隔开。
 *
 *
 * 样例输入
 * 7
 * 1 1 A
 * 1 2 B
 * 1 5 A
 * 1 3 C
 * 1 4 D
 * 2 A B
 * 2 B C
 * 样例输出
 * 3 1 5 2 4
 */
public class Main {
    public static void main(String[] args){

    }
}
